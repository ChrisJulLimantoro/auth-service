// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @db.Uuid @default(uuid())
  email   String   @unique
  password String
  is_owner Boolean @default(false)

  role_owned Role[]
  roles    UserRole[]
  companies Company[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@map("users")
  @@index([deleted_at]) // optimize for soft delete
  @@index([email]) // optimize for query
}

model Role {
  id      String   @id @db.Uuid @default(uuid())
  name     String
  company_id String @db.Uuid
  store_id String? @db.Uuid
  owner_id String @db.Uuid

  owner     User @relation(fields: [owner_id], references: [id])
  users     UserRole[]
  features  FeatureRole[]
  company   Company @relation(fields: [company_id], references: [id])
  store     Store? @relation(fields: [store_id], references: [id])
  pages     PageRole[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@unique([name, company_id, store_id])
  @@map("roles")
  @@index([deleted_at]) // optimize for soft delete
  @@index([company_id, store_id]) // optimize for query
}

model UserRole {
  id     String   @id @db.Uuid @default(uuid())
  user_id String  @db.Uuid
  role_id String  @db.Uuid

  user   User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  role   Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)


  @@unique([user_id, role_id])
  @@map("user_roles")
  @@index([user_id])
  @@index([role_id])
}

model Company {
  id       String         @id @db.Uuid @default(uuid())
  name     String
  code     String
  owner_id String @db.Uuid

  roles    Role[]
  stores Store[]
  owner User @relation(fields: [owner_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@map("companies")  
  @@index([deleted_at]) // optimize for soft delete
  @@index([owner_id]) // optimize for query

}

model Store {
  id      String         @id @db.Uuid @default(uuid())
  code    String
  name    String
  logo    String
  company_id String @db.Uuid

  roles    Role[]
  company Company @relation(fields: [company_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  @@map("stores")
  @@index([deleted_at]) // optimize for soft delete
  @@index([company_id]) // optimize for query
}

model Feature {
  id     String   @id @db.Uuid @default(uuid())
  name    String
  description String
  service String

  roles   FeatureRole[]
  pages   PageFeature[]

  @@map("features")
}

model FeatureRole {
  id         String   @id @db.Uuid @default(uuid())
  feature_id String @db.Uuid
  role_id    String @db.Uuid

  feature    Feature  @relation(fields: [feature_id], references: [id], onDelete: Cascade)
  role       Role     @relation(fields: [role_id], references: [id], onDelete: Cascade)


  @@unique([feature_id, role_id])
  @@map("feature_roles")
  @@index([feature_id])
  @@index([role_id])
}

model Page {
  id      String   @id @db.Uuid @default(uuid())
  path    String
  action  String

  roles   PageRole[]
  features PageFeature[]

  @@map("pages")
  @@index([path]) // optimize for query
}

model PageRole {
  id     String   @id @db.Uuid @default(uuid())
  page_id String @db.Uuid
  role_id String @db.Uuid

  page Page @relation(fields: [page_id], references: [id], onDelete: Cascade)
  role Role @relation(fields: [role_id], references: [id], onDelete: Cascade)

  @@unique([page_id, role_id])
  @@map("page_roles")
  @@index([page_id])
  @@index([role_id])
}

model PageFeature {
  id         String   @id @db.Uuid @default(uuid())
  page_id    String @db.Uuid
  feature_id String @db.Uuid

  page    Page    @relation(fields: [page_id], references: [id], onDelete: Cascade)
  feature Feature @relation(fields: [feature_id], references: [id], onDelete: Cascade)

  @@unique([page_id, feature_id])
  @@map("page_features")
  @@index([page_id])
  @@index([feature_id])
}

